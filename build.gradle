plugins {
  id 'java'
  id 'maven-publish'
  id 'signing'
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
  main {
    java {
      srcDir 'src/main'
    }
  }
  test {
    java {
      srcDir 'src/test'
    }
    resources {
      srcDir 'assets'
    }
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

jar {
  manifest {
    attributes(
      'Hjson-Version': project.version,
    )
  }
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

task(testSuite, dependsOn: ['classes','testClasses'], type: JavaExec) {
  mainClass = 'org.hjson.test.Main'
  classpath = files(sourceSets.main.runtimeClasspath, sourceSets.test.runtimeClasspath)
}

test.dependsOn testSuite

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      pom {
        name = "Hjson Library"
        description = project.description
        url = "https://github.com/hjson/hjson-java"
        licenses {
          license {
            name = "The MIT License (MIT)"
            url = "https://github.com/hjson/hjson-java/blob/master/LICENSE"
            distribution = "repo"
          }
        }
        developers {
          developer {
            id = "laktak"
            name = "Christian Zangl"
          }
          developer {
            id = "trobro"
            name = "Fredrik Trobro"
          }
        }
        scm {
          connection = "scm:git@github.com:hjson/hjson-java.git"
          developerConnection = "scm:git@github.com:hjson/hjson-java.git"
          url = "https://github.com/hjson/hjson-java"
        }
      }
    }
  }
  repositories {
    maven {
      name = "OSSRH"
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = System.getenv("MAVEN_USERNAME")
        password = System.getenv("MAVEN_PASSWORD")
      }
    }
  }
}

signing {
  def signingKey = System.getenv("GPG_SIGNING_KEY")
  def signingPassword = System.getenv("GPG_SIGNING_PASSWORD")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.maven
}
